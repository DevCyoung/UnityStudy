using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// 이펙트 프리펩과 이펙트 프리펩의 경로 , 타입등의 속성 데이터를 가지고 있게되며 
/// 프리팹 사전로딩Preloading 기능을 가지고있고 풀링을 위한기능이기도 합니다.
/// 이펙트 인스턴스 기능도 가지고 있습니다. 이를 풀링과 연계하여 사용합니다.
/// </summary>
public class EffectClip
{
    //추후 속성은 같지만 , 다른 이펙트 클립이 있을수있어 분별하기위한 ID
    public int realId = 0;

    public EffectType effectType = EffectType.NORMAL;
    public GameObject effectPrefab = null; //프리로딩데이터를 담아두는곳 한번만 프리로딩하면 계속해서 사용합니다.

    public string effectPath = string.Empty; //리소스 파일이름과 경로는 분리하는것이 좋습니다. 실무에서도 분리하여 사용합니다.
    public string effectName = string.Empty;
    public string effectFullPath = string.Empty;
    public EffectClip() { } //xml
    
    public void PreLoad() //사전 로딩 작업 
    {
        this.effectFullPath = effectPath + effectName;
        if( effectFullPath != null && effectPrefab == null ) // 한번만 로딩하기위한 작업 
        {
            effectPrefab =  ResourceManager.Load(effectFullPath) as GameObject ;
        }
    }
    public void ReleaseEffect()
    {
        if(this.effectPrefab != null )
        {
            effectPrefab = null; // 가비지 컬렉터가 수거해갈수있도록 null을줍니다. 가비지컬렉터는 더이상 참조받지않으면 가비지컬렉터가 수거합니다.
        }
    }

    /// <summary>
    /// 원하는 위치에 내가 원하는 이펙트를 인스턴스 합니다.
    /// 
    /// </summary>
    public GameObject Instantidate(Vector3 Pos)
    {
        if( effectPrefab == null ) // effecprefab이 null 인지 체크합니다.
        {
            this.PreLoad();
        }
        if (effectPrefab != null  ) // preload후 effectprefab 이 null 이아니면 effec를 생성해 반환해줍니다. 
        {
            GameObject effect = GameObject.Instantiate(effectPrefab, Pos, Quaternion.identity); // 원본의 데이터를 건들지않음
            return effect;
        }
        return null;

    }
}
